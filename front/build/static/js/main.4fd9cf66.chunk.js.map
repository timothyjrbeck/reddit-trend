{"version":3,"sources":["components/ColorModeSwitcher.js","components/Header.js","components/Rating.js","components/Footer.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","pl","Header","title","p","spacing","maxW","textAlign","base","sm","md","pb","as","defaultProps","Rating","useState","url","setUrl","prediction","setPrediction","state","setState","setError","minW","direction","onSubmit","e","preventDefault","str","RegExp","test","alert","fetch","window","location","protocol","hostname","then","response","json","data","console","log","error","Error","result","catch","placeholder","onChange","handleSubmit","target","value","w","colorScheme","isLoading","type","Check","pt","href","mt","noOfLines","isLoaded","current_rating","will_be_archived_in_days","expected_rating","ListHeader","children","fontWeight","mb","LargeWithNewsletter","bg","Stack","py","templateColumns","align","border","_focus","_hover","icon","App","theme","h","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4fd9cf66.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  useColorMode,\n  useColorModeValue,\n  Button,\n  Text,\n} from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <Fragment>\n      <Button\n        size=\"md\"\n        fontSize=\"lg\"\n        aria-label={`Switch to ${text} mode`}\n        variant=\"ghost\"\n        color=\"current\"\n        marginLeft=\"2\"\n        onClick={toggleColorMode}\n        {...props}\n      >\n        <SwitchIcon /> <Text pl={3}> Switch to {text} mode</Text>\n      </Button>\n    </Fragment>\n  );\n};\n\nexport default ColorModeSwitcher;\n","import {\r\n  Box,\r\n  Heading,\r\n  Stack,\r\n  HStack,\r\n  VStack,\r\n  Text,\r\n  Center,\r\n} from '@chakra-ui/react';\r\n\r\nimport ColorModeSwitcher from '../components/ColorModeSwitcher';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <div>\r\n      <Box p={4}>\r\n        <Center>\r\n          <Stack spacing={4} maxW={'4xl'} textAlign={'center'}>\r\n            <ColorModeSwitcher />\r\n\r\n            <Heading fontSize={{ base: '3xl', sm: '4xl', md: '6xl' }} pb=\"4\">\r\n              Reddit post trend prediction{' '}\r\n              <Text as={'span'} color={'orange.400'}>\r\n                made easy\r\n              </Text>\r\n            </Heading>\r\n\r\n            <Text fontSize={'xl'} pb=\"6\">\r\n              This project explores the possibility of applying machine learning\r\n              tools for marketing and community engagement purposes. We've built\r\n              a system consisting of several components that analyzes existing\r\n              Reddit posts and makes plausible predictions about their expected\r\n              performance in terms of ratings and community interactions.\r\n            </Text>\r\n          </Stack>\r\n        </Center>\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: 'Reddit Tracker',\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  Stack,\r\n  Input,\r\n  Link,\r\n  FormControl,\r\n  Heading,\r\n  Button,\r\n  Center,\r\n  Textarea,\r\n  Text,\r\n  SkeletonText,\r\n  Skeleton,\r\n  Box,\r\n} from '@chakra-ui/react';\r\nimport { CheckIcon } from '@chakra-ui/icons';\r\nimport { FormEvent, ChangeEvent, useState } from 'react';\r\n\r\nfunction validURL(str) {\r\n  var pattern = new RegExp(\r\n    '^(https?:\\\\/\\\\/)?' + // protocol\r\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n      '(\\\\#[-a-z\\\\d_]*)?$',\r\n    'i'\r\n  ); // fragment locator\r\n  return !!pattern.test(str);\r\n}\r\n\r\nconst Rating = () => {\r\n  const [url, setUrl] = useState('');\r\n  const [prediction, setPrediction] = useState('');\r\n  const [state, setState] = useState('initial');\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleSubmit = url => {\r\n    console.log('cliked');\r\n    if (state === 'initial') {\r\n      setUrl(url);\r\n    } else {\r\n      setState('initial');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Center>\r\n        <Stack>\r\n          <Stack\r\n            textAlign={'center'}\r\n            maxW=\"560px\"\r\n            minW=\"560px\"\r\n            direction={{ base: 'row' }}\r\n            as={'form'}\r\n            spacing={'12px'}\r\n            onSubmit={e => {\r\n              e.preventDefault();\r\n              setError(false);\r\n              setState('submitting');\r\n              // alert(`Retrieving data from ${url}...`);\r\n              if (validURL(url)) {\r\n                // Retrieve Reddit Post JSON Data\r\n                fetch(\r\n                  `${window.location.protocol}//${window.location.hostname}/predict?url=${url}`\r\n                )\r\n                  .then(response => response.json())\r\n                  .then(data => {\r\n                    console.log(data);\r\n                    if (!data.error) {\r\n                      setState('success');\r\n                      setPrediction(data.result);\r\n                    } else {\r\n                      throw new Error(data.error);\r\n                    }\r\n                  })\r\n                  .catch(error => {\r\n                    alert(error);\r\n                    console.error(error);\r\n                    setError(true);\r\n                    setState('initial');\r\n                  });\r\n              } else {\r\n                alert(`'${url}' is not a valid URL, Please try again.`);\r\n                setError(true);\r\n                setState('initial');\r\n                return;\r\n              }\r\n            }}\r\n          >\r\n            <FormControl>\r\n              <Input\r\n                variant=\"outline\"\r\n                placeholder=\"Copy and Paste Your Reddit Post URL Here!\"\r\n                onChange={e => handleSubmit(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl w={{ base: '100%', md: '40%' }}>\r\n              <Button\r\n                colorScheme={state === 'success' ? 'green' : 'blue'}\r\n                isLoading={state === 'submitting'}\r\n                w=\"100%\"\r\n                type=\"submit\"\r\n              >\r\n                {state === 'success' ? <CheckIcon /> : 'Submit'}\r\n              </Button>\r\n            </FormControl>\r\n          </Stack>\r\n          <Text as=\"sub\">\r\n            {' '}\r\n            e.g.)\r\n            https://www.reddit.com/r/Health/comments/prj05q/high_staff_vaccination_rates_helps_nursing_homes/\r\n          </Text>\r\n        </Stack>\r\n      </Center>\r\n\r\n      {state === 'success' && (\r\n        <Center pt=\"5\">\r\n          <Stack w=\"100%\">\r\n            <Text>\r\n              Analysis of{' '}\r\n              <Text as=\"i\">\r\n                <Link href={url}> {url} </Link>\r\n              </Text>\r\n            </Text>\r\n            {prediction == '' ? (\r\n              <SkeletonText mt=\"4\" noOfLines={4} spacing=\"4\" isLoaded={false} />\r\n            ) : (\r\n              <Center pt=\"5\">\r\n                <Stack>\r\n                  <Center pt=\"5\">\r\n                    <Text as=\"em\"> current rating 📤</Text>\r\n                  </Center>\r\n                  <Center>\r\n                    <Heading fontSize={{ base: '5xl', sm: '6xl', md: '8xl' }}>\r\n                      {prediction.current_rating}\r\n                    </Heading>\r\n                  </Center>\r\n                  <Center pt=\"5\">\r\n                    <Text as=\"em\">\r\n                      {' '}\r\n                      expected rating 📈 in{' '}\r\n                      <Text as=\"u\">\r\n                        {prediction.will_be_archived_in_days}\r\n                      </Text>{' '}\r\n                      days\r\n                    </Text>\r\n                  </Center>\r\n                  <Center>\r\n                    <Heading fontSize={{ base: '5xl', sm: '6xl', md: '8xl' }}>\r\n                      {prediction.expected_rating}\r\n                    </Heading>\r\n                  </Center>\r\n\r\n                  <Center pt=\"5\">\r\n                    <Text as=\"sub\">\r\n                      {' '}\r\n                      *this post will be archived in{' '}\r\n                      <Text as=\"u\">\r\n                        {prediction.will_be_archived_in_days}\r\n                      </Text>{' '}\r\n                      days\r\n                    </Text>\r\n                  </Center>\r\n                </Stack>\r\n              </Center>\r\n            )}\r\n          </Stack>\r\n        </Center>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Rating;\r\n","import {\r\n  Box,\r\n  chakra,\r\n  Container,\r\n  Link,\r\n  SimpleGrid,\r\n  Stack,\r\n  Text,\r\n  VisuallyHidden,\r\n  Input,\r\n  IconButton,\r\n  useColorModeValue,\r\n} from '@chakra-ui/react';\r\nimport { BiMailSend } from 'react-icons/bi';\r\n\r\nconst ListHeader = ({ children }) => {\r\n  return (\r\n    <Text fontWeight={'500'} fontSize={'lg'} mb={2}>\r\n      {children}\r\n    </Text>\r\n  );\r\n};\r\n\r\nexport default function LargeWithNewsletter() {\r\n  return (\r\n    <Box\r\n      bg={useColorModeValue('gray.50', 'gray.900')}\r\n      color={useColorModeValue('gray.700', 'gray.200')}\r\n      mt={5}\r\n    >\r\n      <Container as={Stack} maxW={'6xl'} py={10}>\r\n        <SimpleGrid\r\n          templateColumns={{ sm: '1fr 1fr', md: '2fr 1fr 1fr 2fr' }}\r\n          spacing={8}\r\n        >\r\n          <Stack spacing={6}>\r\n            <Text fontSize={'sm'}>\r\n              © 2021 Agile Project, Reddit Trend <br />\r\n              by Nikolay, Erik and Jaeryang\r\n            </Text>\r\n          </Stack>\r\n\r\n          <Stack align={'flex-start'}></Stack>\r\n          <Stack align={'flex-start'}>\r\n            <ListHeader>Project</ListHeader>\r\n            <Link href={'#'}>About us</Link>\r\n            <Link href={'#'}>Predict</Link>\r\n            <Link href={'#'}>Free Pricing</Link>\r\n          </Stack>\r\n          <Stack align={'flex-start'}>\r\n            <ListHeader>Stay up to date</ListHeader>\r\n            <Stack direction={'row'}>\r\n              <Input\r\n                placeholder={'Your email address'}\r\n                bg={useColorModeValue('blackAlpha.100', 'whiteAlpha.100')}\r\n                border={0}\r\n                _focus={{\r\n                  bg: 'whiteAlpha.300',\r\n                }}\r\n              />\r\n              <IconButton\r\n                bg={useColorModeValue('green.400', 'green.800')}\r\n                color={useColorModeValue('white', 'gray.800')}\r\n                _hover={{\r\n                  bg: 'green.600',\r\n                }}\r\n                aria-label=\"Subscribe\"\r\n                icon={<BiMailSend />}\r\n                onClick={e => {\r\n                  alert(\"You've been subscribed to our mailing list.\");\r\n                }}\r\n              />\r\n            </Stack>\r\n          </Stack>\r\n        </SimpleGrid>\r\n      </Container>\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\nimport { ChakraProvider, theme, Container, Center } from '@chakra-ui/react';\nimport Header from './components/Header';\nimport Rating from './components/Rating';\n\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Center w=\"100vw\" h=\"90vh\" mb={4}>\n        <Container maxW={'5xl'}>\n          <Header title=\"🤖 Reddit Trend 🚀\" />\n          <Rating />\n        </Container>\n      </Center>\n      <Footer />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}